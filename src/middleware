import { NextRequest, NextResponse } from "next/server";
import { cookies } from 'next/headers'


const protectedRoutes = ['/admin/default']
const publicRoutes = ['/auth/sign-in', '/auth/sign-up', '/']

function getUserStatus(role:string) {
  if (role === 'sa') {
    return 'admin'
  } else if (role === 'sub') {
    return 'user'
  }  
}

function getRequiredStatus(pathname:string) {
  if (pathname === '/admin') {
    return 'admin'
  } else if (pathname === '/user') {
    return 'user'
  }  
}


export async function middleware(req: NextRequest) {
   
 

  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)
  const cookie = cookies().get('session')?.value
  const session = await decrypt(cookie)

 // 5. Redirect to /login if the user is not authenticated
 if (isProtectedRoute && !session?.userId) {
  return NextResponse.redirect(new URL('/auth/sign-in', req.nextUrl))
}

// 6. Redirect to /dashboard if the user is authenticated
if (
  isPublicRoute &&
  session?.userId &&
  !req.nextUrl.pathname.startsWith('/dashboard')
) {
  return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
}

return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)'],
}
//   const userIsAuthenticated = true //checkUserAuthentication();
//   const url = req.nextUrl.clone();

//   const userStatus = getUserStatus(token)
//   const requiredStatus = getRequiredStatus(req.nextUrl.pathname)

//    if (userStatus !== requiredStatus) 
//       return NextResponse.redirect('/error')
  

//   if (!userIsAuthenticated) {
//     url.pathname = "/auth/sign-in";
//     return NextResponse.redirect(url);
//     //return NextResponse.redirect(new URL("/auth/sign-in", req.url));
//   }

//   return NextResponse.next();
// }




// type IUserInfo =
//   { 
//     id:string,
//     username: string,
//     role:string,    
//     prefix:string 
//   }

//   function parseJwt(token:string) {
//     if (!token) { return; }
//     const base64Url = token.split('.')[1];
//     const base64 = base64Url.replace('-', '+').replace('_', '/');
//     return JSON.parse(window.atob(base64));
// }

// export async function middleware(req: NextRequest) {
//   // const { pathname } = request.nextUrl;
//   // const url = request.nextUrl.clone();

//   // const cookie = request.cookies.get();
//   // const token= cookie?.value
//   // //const token =  localStorage.getItem('token')
 
//     const url = req.nextUrl
//     // let changed = false



//     return NextResponse.redirect(url);
//     // const token = url.searchParams.get("token");
//     // if (parseJwt(token)) {
//     //   url.searchParams.delete('token')
//     //   changed = true
//     // }
  
//     // // Avoid infinite loop by only redirecting if the query params were changed
//     // if (changed) {
//     //   const response = NextResponse.redirect(url);
//     //   response.cookies.set("key", key || "");
//     //   return response;
//     // } else if (parseJwt(currentCookie?.value)) {
//     //   return NextResponse.next();
//     // } else {
//     //   return NextResponse.redirect(new URL("/auth", req.url));
//     // }
  
 

//   // const userRoutes = [
//   //   "/dashboard/user/profile",
//   //   "/dashboard/user/change-password",
//   // ];

//   // const adminRoutes = [
//   //   "/dashboard/admin/profile",
//   //   "/dashboard/admin/change-password",
//   // ];

//   // const superAdminRoutes = [
//   //   ...adminRoutes,
//   //   "/dashboard/super-admin/admins",
//   //   "/dashboard/super-admin/add-admin",
//   // ];

//   // if (token) {
//   //   url.pathname = "/not-found";

//   //   // const user = decodedToken(token as string) as IUserInfo;

//   //   // // if token is expired then redirect to login page
//   //   // if (user.exp < Date.now() / 1000) {
//   //   //   url.pathname = "/signin";
//   //   //   return NextResponse.redirect(url);
//   //   // }
//   //   // // if user role is not admin and user is trying to access admin routes then redirect to login page
//   //   // if (
//   //   //   (user.role !== userRole.ADMIN || user.role !== userRole.SUPER_ADMIN) &&
//   //   //   (adminRoutes.includes(pathname) || superAdminRoutes.includes(pathname))
//   //   // ) {
//   //   //   return NextResponse.redirect(url);
//   //   // }

//   //   // // if admin is trying to access user routes then redirect to login page
//   //   // if (user.role === userRole.ADMIN && userRoutes.includes(pathname)) {
//   //   //   return NextResponse.redirect(url);
//   //   // }
//   //   // // if admin is trying to access super-admin routes then redirect to login page
//   //   // if (user.role === userRole.ADMIN && superAdminRoutes.includes(pathname)) {
//   //   //   return NextResponse.redirect(url);
//   //   // }
//   //   // // if super-admin is trying to access user routes then redirect to login page
//   //   // if (user.role === userRole.SUPER_ADMIN && userRoutes.includes(pathname)) {
//   //   //   return NextResponse.redirect(url);
//   //   // }
  
//   // }
// }